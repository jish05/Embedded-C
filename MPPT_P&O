#include <xc.h>
#include <pic18.h>
#include <stdint.h>


#define _XTAL_FREQ 20000000      // Assuming an 20MHz crystal frequency

// Function prototypes
void ADC_Init();
uint16_t ADC_Read(uint8_t channel);
void PWM_Init();
void boostConverterMPPT(uint16_t v_sense);

// Main function
void main() {
    ADC_Init();
    PWM_Init();

    while(1) {
        uint16_t v_sense = ADC_Read(0);  // Assuming voltage sense is connected to channel 0
        boostConverterMPPT(v_sense);
    }
}

// Initialize ADC
void ADC_Init() {
    TRISA0 = 1;
    ADCON1 = 11001110;  // Vref+ connected to external reference, AN0 as analog input
}

// Read ADC value
uint16_t ADC_Read(uint8_t channel) {
    ADCON0 &= 00000101;   // Clear previous channel selection
    ADCON0 |= (channel << 3);   // Set the new channel
    __delay_us(20);         // Acquisition time
    GO_nDONE = 1;           // Start ADC conversion
    while(GO_nDONE);        // Wait for conversion to complete
    return (uint16_t)((ADRESH << 8) + ADRESL);// Return 10-bit ADC result
}

// Initialize PWM
void PWM_Init() {
    TRISC2 = 0;             // Make RC2 a PWM output
    PR2 = 199;
    CCPR1L = 99;// PWM period for 25kHz at 20kHz crystal
    CCP1CON = 00011100; // PWM mode, single output
    T2CON = 00000100;             // Enable Timer2
}

// MPPT Perturb and Observe Algorithm
void boostConverterMPPT(uint16_t v_sense) {
    static uint16_t v_prev = 24;
    static uint8_t direction = 0;

    if (v_sense > v_prev) {
        // Increase duty cycle
        CCPR1L++;
        direction = 1;
    } else if (v_sense < v_prev) {
        // Decrease duty cycle
        CCPR1L--;
        direction = 0;
    }

    // Update previous voltage
    v_prev = v_sense;
    __delay_ms(100);  // Adjust the delay based on the system dynamics
}

